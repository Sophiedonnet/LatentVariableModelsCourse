############" Donnes d'orgine
Data.GPS <- read.csv2("~/Bureau/GPS_Yacks/Données GPS.csv", header=FALSE)
myData <- data.frame(X = Data.GPS$V4)
myData$Y <-Data.GPS$V5
n <- nrow(myData)
###########" Calculs des distances succesives parcourues
Dist <-(diff(myData$X))^2 + (diff(myData$Y))^2
Dist
hist(Dist)
lim <- quantile(Dist,0.8)
which.dist <- which(Dist>lim)
which.dist
#--------------
diff(which.dist)
#--------------
which.dist[c(diff(which.dist),0)==1]
#--------------
which.remove <- which.dist[c(diff(which.dist),0)==1]
# remplacement positions correspondants à des distances trop grandes par de NA
myData[which.remove,] = NA
#--------------
which.abherrant <- which.dist[c(diff(which.dist),0)==1] +1
#--------------
which.abherrant <- which.dist[c(diff(which.dist),0)==1] +1
# remplacement positions correspondants à des distances trop grandes par de NA
myData[which.abherrant,] = NA
myNewData <- myData
for (i in which(is.na(myNewData$X))){
myNewData[i,] = 1/2*(myNewData[i-1,]+myNewData[i+1,])
}
newDist <-(diff(myNewData$X))^2 + (diff(myNewData$Y))^2
hist(newDist)
plot(newDist)
library(ggplot2)
library(dplyr)
############" Donnes d'orgine
Data.GPS <- read.csv2("~/Bureau/GPS_Yacks/Données GPS.csv", header=FALSE)
myData <- data.frame(X = Data.GPS$V4)
myData$Y <-Data.GPS$V5
n <- nrow(myData)
###########" Calculs des distances succesives parcourues
Dist <-(diff(myData$X))^2 + (diff(myData$Y))^2
hist(Dist)
lim <- quantile(Dist,0.8)
which.dist <- which(Dist>lim)
#--------------
which.abherrant <- which.dist[c(diff(which.dist),0)==1] +1
# remplacement positions correspondants à des distances trop grandes par de NA
myData[which.abherrant,] = NA
# NA remplacées par des moyennes entre position avant et après
myNewData <- myData
for (i in which(is.na(myNewData$X))){
myNewData[i,] = 1/2*(myNewData[i-1,]+myNewData[i+1,])
}
newDist <-(diff(myNewData$X))^2 + (diff(myNewData$Y))^2
hist(newDist)
plot(newDist)
plot(newDist,Dist)
library(moveHMM)
############" Donnes d'orgine
Data.GPS <- read.csv2("~/Bureau/GPS_Yacks/Données GPS.csv", header=FALSE)
myData <- data.frame(X = Data.GPS$V4)
myData$Y <-Data.GPS$V5
help("moveHMM")
myDatmoveHMM <- prepData(myData,type = c("UTM"),
coordNames = c("X", "Y"),
LLangle = NULL
)
plot(myDatmoveHMM)
plot(myDatmoveHMM,ask=FALSE,compact+TRUE)
plot(myDatmoveHMM,ask=FALSE,compact =TRUE)
names(myDatamoveHMM)
#----------------------- plot with package moveHMM
myDatamoveHMM <- prepData(myData,type = c("UTM"),
coordNames = c("X", "Y"),
LLangle = NULL
)
names(myDatamoveHMM)
plot(Dist,myDatamoveHMM$step)
Dist
myDatamoveHMM$step
plot(Dist,myDatamoveHMM$step[-n])
###########" Calculs des distances succesives parcourues
Dist <-sqrt((diff(myData$X))^2 + (diff(myData$Y))^2)
plot(Dist,myDatamoveHMM$step[-n])
###########" Calculs des distances succesives parcourues
Dist <-myDatamoveHMM$step[-n]
hist(Dist)
lim <- quantile(Dist,0.8)
which.dist <- which(Dist>lim)
which.dist
#--------------
which.abherrant <- which.dist[c(diff(which.dist),0)==1] +1
# remplacement positions correspondants à des distances trop grandes par de NA
myData[which.abherrant,] = NA
#--------------
which.abherrant <- which.dist[c(diff(which.dist),0)==1] +1
# remplacement positions correspondants à des distances trop grandes par de NA
myNewData <- myData
myNewData[which.abherrant,] = NA
library(ggplot2)
library(dplyr)
library(moveHMM)
############" Donnes d'orgine
Data.GPS <- read.csv2("~/Bureau/GPS_Yacks/Données GPS.csv", header=FALSE)
#View(Data.GPS)
myData <- data.frame(X = Data.GPS$V4)
myData$Y <-Data.GPS$V5
#----------------------- plot with package moveHMM
myDatamoveHMM <- prepData(myData,type = c("UTM"),
coordNames = c("X", "Y"),
LLangle = NULL
)
plot(myDatamoveHMM,ask=FALSE,compact =TRUE)
n <- nrow(myData)
###########" Calcul des distances successives parcourues
Dist <-myDatamoveHMM$step[-n]
############ Distribution de ces distances et repérage des distances TROP "grande"
hist(Dist)
lim <- quantile(Dist,0.8)
which.dist <- which(Dist>lim)
#--------------
which.abherrant <- which.dist[c(diff(which.dist),0)==1] +1
# remplacement positions correspondants à des distances trop grandes par de NA
myNewData <- myData
myNewData[which.abherrant,] = NA
# NA remplacées par des moyennes entre position avant et après
for (i in which(is.na(myNewData$X))){
myNewData[i,] = 1/2*(myNewData[i-1,]+myNewData[i+1,])
}
newDist <-(diff(myNewData$X))^2 + (diff(myNewData$Y))^2
myNewDatamoveHMM <- prepData(myNewData,type = c("UTM"),
coordNames = c("X", "Y"),
LLangle = NULL
)
plot(myNewDatamoveHMM,ask=FALSE,compact =TRUE)
plot(myNewDatamoveHMM$step[-n],Dist)
myNewDatamoveHMM$ID
myDatamoveHMM$ID='Rough'
myNewDatamoveHMM$ID = 'Corrected'
myDatamoveHMM$ID='Rough'
cbind(myDatamoveHMM,myNewDatamoveHMM)
rbind(myDatamoveHMM,myNewDatamoveHMM)
plot(rbind(myDatamoveHMM,myNewDatamoveHMM),compact=TRUE)
coordNames = c("X", "Y"),
LLangle = NULL
)
library(ggplot2)
library(dplyr)
library(moveHMM)
############" Donnes d'orgine
Data.GPS <- read.csv2("~/Bureau/GPS_Yacks/Données GPS.csv", header=FALSE)
#View(Data.GPS)
myData <- data.frame(X = Data.GPS$V4)
myData$Y <-Data.GPS$V5
#----------------------- plot with package moveHMM
myDatamoveHMM <- prepData(myData,type = c("LL"),
coordNames = c("X", "Y"),
LLangle = NULL
)
plot(myDatamoveHMM,ask=FALSE,compact =TRUE)
n <- nrow(myData)
###########" Calcul des distances successives parcourues
Dist <-myDatamoveHMM$step[-n]
hist(Dist)
lim <- quantile(Dist,0.8)
which.dist <- which(Dist>lim)
#--------------
which.abherrant <- which.dist[c(diff(which.dist),0)==1] +1
# remplacement positions correspondants à des distances trop grandes par de NA
myNewData <- myData
myNewData[which.abherrant,] = NA
# NA remplacées par des moyennes entre position avant et après
for (i in which(is.na(myNewData$X))){
myNewData[i,] = 1/2*(myNewData[i-1,]+myNewData[i+1,])
}
myNewDatamoveHMM <- prepData(myNewData,type = c("UTM"),
coordNames = c("X", "Y"),
LLangle = NULL
)
plot(myNewDatamoveHMM,ask=FALSE,compact =TRUE)
plot(myNewDatamoveHMM$step[-n],Dist)
myDatamoveHMM$ID='Rough'
plot(rbind(myDatamoveHMM,myNewDatamoveHMM),compact=TRUE)
LLangle = NULL
)
myNewDatamoveHMM <- prepData(myNewData,type = c("LL"),
coordNames = c("X", "Y"),
LLangle = NULL)
plot(myNewDatamoveHMM,ask=FALSE,compact =TRUE)
plot(myNewDatamoveHMM$step[-n],Dist)
myNewDatamoveHMM$ID = 'Corrected'
myDatamoveHMM$ID='Rough'
plot(rbind(myDatamoveHMM,myNewDatamoveHMM),compact=TRUE)
library(moveHMM)
############" Donnes d'orgine
Data.GPS <- read.csv2("~/Bureau/GPS_Yacks/Données GPS.csv", header=FALSE)
# choisir le typ de données
# LL = longitude Latitute ou UTM  = easting/northing
typeData  = 'LL' # 'UTM'
myData <- data.frame(X = Data.GPS$V4)
myData$Y <-Data.GPS$V5
#----------------------- plot with package moveHMM
myDatamoveHMM <- prepData(myData,type = typeData,
coordNames = c("X", "Y"),
LLangle = NULL
)
plot(myDatamoveHMM,ask=FALSE,compact =TRUE)
n <- nrow(myData)
###########" Calcul des distances successives parcourues
Dist <-myDatamoveHMM$step[-n]
hist(Dist)
lim <- quantile(Dist,0.8)
which.dist <- which(Dist>lim)
#--------------
which.abherrant <- which.dist[c(diff(which.dist),0)==1] +1
# remplacement positions correspondants à des distances trop grandes par de NA
myNewData <- myData
myNewData[which.abherrant,] = NA
# NA remplacées par des moyennes entre position avant et après
for (i in which(is.na(myNewData$X))){
myNewData[i,] = 1/2*(myNewData[i-1,]+myNewData[i+1,])
}
myNewDatamoveHMM <- prepData(myNewData,type =  typeData,
coordNames = c("X", "Y"),
LLangle = NULL)
plot(myNewDatamoveHMM,ask=FALSE,compact =TRUE)
plot(myNewDatamoveHMM$step[-n],Dist)
myNewDatamoveHMM$ID = 'Corrected'
myDatamoveHMM$ID='Rough'
plot(rbind(myDatamoveHMM,myNewDatamoveHMM),compact=TRUE)
typeData  =  'UTM' 'LL' #
# choisir le typ de données
# LL = longitude Latitute ou UTM  = easting/northing
typeData  =  'UTM' #'LL' #
myData <- data.frame(X = Data.GPS$V4)
myData$Y <-Data.GPS$V5
#----------------------- plot with package moveHMM
myDatamoveHMM <- prepData(myData,type = typeData,
coordNames = c("X", "Y"),
LLangle = NULL
)
plot(myDatamoveHMM,ask=FALSE,compact =TRUE)
n <- nrow(myData)
###########" Calcul des distances successives parcourues
Dist <-myDatamoveHMM$step[-n]
hist(Dist)
myData <- data.frame(X = Data.GPS$V4)
myData$Y <-Data.GPS$V5
n <- nrow(myData)
#----------------------- plot with package moveHMM
myDatamoveHMM <- prepData(myData,type = typeData,
coordNames = c("X", "Y"),
LLangle = NULL
)
plot(myDatamoveHMM,ask=FALSE,compact =TRUE)
myDatamoveHMM$ID = 'Rough'
plot(myDatamoveHMM,ask=FALSE,compact =TRUE)
###########" Calcul des distances successives parcourues
Dist <-myDatamoveHMM$step[-n]
hist(Dist)
lim <- quantile(Dist,0.8)
which.dist <- which(Dist>lim)
#--------------
which.abherrant <- which.dist[c(diff(which.dist),0)==1] +1
# remplacement positions correspondants à des distances trop grandes par de NA
myNewData <- myData
myNewData[which.abherrant,] = NA
# NA remplacées par des moyennes entre position avant et après
for (i in which(is.na(myNewData$X))){
myNewData[i,] = 1/2*(myNewData[i-1,]+myNewData[i+1,])
}
myNewDatamoveHMM <- prepData(myNewData,type =  typeData,
coordNames = c("X", "Y"),
LLangle = NULL)
plot(myNewDatamoveHMM,ask=FALSE,compact =TRUE)
plot(myNewDatamoveHMM$step[-n],Dist)
myNewDatamoveHMM$ID = 'Corrected'
myDatamoveHMM$ID='Rough'
myNewDatamoveHMM$ID = 'Corrected'
plot(rbind(myDatamoveHMM,myNewDatamoveHMM),compact=TRUE)
plot(rbind(myDatamoveHMM,myNewDatamoveHMM),compact=TRUE, ask = FALSE)
myNewDatamoveHMM$ID = 'Corrected'
plot(rbind(myDatamoveHMM,myNewDatamoveHMM),compact=TRUE, ask = FALSE)
`18397_220324.sunny` <- read.csv("~/Bureau/GPS_Yacks/18397_220324 sunny.csv")
View(`18397_220324.sunny`)
`18397_220324.sunny` <- read.csv("~/Bureau/GPS_Yacks/18397_220324 sunny.csv")
DataSunny <- read.csv("~/Bureau/GPS_Yacks/18397_220324 sunny.csv")
DataSunny$Time
DataSunny$Time
library(dplyr)
library(lubridate)
DataSunny <- read.csv("~/Bureau/GPS_Yacks/18397_220324 sunny.csv")
install.packages("visNetwork")
library(visNetwork)
help("visNetwork")
nodes <- data.frame(id = 1:3)
edges <- data.frame(from = c(1,2), to = c(1,3))
visNetwork(nodes, edges)
visNetwork(nodes, edges, main = "visNetwork minimal example")
visNetwork(nodes, edges, main = list(text = "visNetwork minimal example",
style = "font-family:Comic Sans MS;color:#ff0000;font-size:15px;text-align:center;"))
# and subtitle and footer
visNetwork(nodes, edges, main = "visNetwork minimal example",
submain = "For add a subtitle", footer = "Fig.1 minimal example")
# change background color
visNetwork(nodes, edges, background = "black")
knit_with_parameters("~/WORK_LOCAL/ADMINISTRATIF/Admin_MIA_Paris/Pres_SOLsTIS/2023_02_Bilan_pour_AG/Bilan_SOLsTIS_AG2023.Rmd")
rm(list=ls());
# Data
abundance <- read.table('BarentsFish.csv', sep=';', header=TRUE)
j <- 10; n <- nrow(abundance)
setwd("~/Dropbox/WORK_DROPBOX/ENSEIGNEMENT/2023-Saclay-MathsSV/LVM_CoursComplet/TP-EM-ZIP")
y <- abundance[, 4+j]
y0 <- 1*(y==0)
rm(list=ls());
# Data
abundance <- read.table('BarentsFish.csv', sep=';', header=TRUE)
j <- 10; n <- nrow(abundance)
y <- abundance[, 4+j]
y0 <- 1*(y==0)
hist(y, breaks=sqrt(n))
hist(y, breaks=100)
# Functions
LogLik <- function(pi, mu, y){sum(log(pi*(y==0) + (1-pi)*dpois(y, mu)))}
# Init
pi <- mean(y0)
mu <- mean(y)
mu
mu <- mean(y>0)
mu
j <- 10; n <- nrow(abundance)
y <- abundance[, 4+j]
y
y <- abundance$Se_me #[, 4+j]
y0 <- 1*(y==0)
hist(y, breaks=100)
# Functions
LogLik <- function(pi, mu, y){sum(log(pi*(y==0) + (1-pi)*dpois(y, mu)))}
# Init
pi <- mean(y0)
# Init
pi <- mean(y==0)
pi
mu <- mean(y>0)
mu
y
mu <- mean(y[y>>0])
mu <- mean(y[y>0])
mu
# EM for ZIP model
tol <- 1e-6; diff <- 2*tol;
iterMax <- 1e3; iter <- 1
logL <- rep(NA, iterMax)
logL[iter] <- LogLik(pi, mu, y)
while((diff > tol) & (iter < iterMax)){
iter <- iter+1
# E step
tau <- y0*pi/(pi + (1-pi)*exp(-mu))
tau <- cbind(tau, (1-tau));
# M step
piNew <- mean(tau[, 1])
muNew <- sum(tau[, 2]*y)/sum(tau[, 2])
# Test & update
diff <- max(abs(c(piNew, muNew)-c(pi, mu)))
pi <- piNew;
mu <- muNew
logL[iter] <- LogLik(pi, mu, y)
cat(pi, mu, diff, logL[iter], '\n')
}
# EM for ZIP model
tol <- 1e-6; diff <- 2*tol;
iterMax <- 1e3; iter <- 1
logL <- rep(NA, iterMax)
logL
logL[iter] <- LogLik(pi, mu, y)
logL[iter]
LogLik(pi, mu, y)
# Functions
LogLik <- function(prob_pi, mu, y){sum(log(prob_pi*(y==0) + (1-prob_pi)*dpois(y, mu)))}
# Init
prob_pi <- mean(y==0)
mu <- mean(y[y>0])
LogLik(prob_pi,mu,y)
prob_pi*(y==0)
prob_pi*(y==0) + (1-prob_pi)*dpois(y, mu)
log(prob_pi*(y==0) + (1-prob_pi)*dpois(y, mu))
cbind(log(prob_pi*(y==0) + (1-prob_pi)*dpois(y, mu)),Y)
cbind(log(prob_pi*(y==0) + (1-prob_pi)*dpois(y, mu)),y)
dpois(y,mu,log =TRUE)
y <- abundance$Se_ma #[, 4+j]
y0 <- 1*(y==0)
hist(y, breaks=100)
# Functions
LogLik <- function(prob_pi, mu, y){sum(log(prob_pi*(y==0) + (1-prob_pi)*dpois(y, mu)))}
# Init
prob_pi <- mean(y==0)
mu <- mean(y[y>0])
LogLik(prob_pi,mu,y)
# EM for ZIP model
tol <- 1e-6; diff <- 2*tol;
iterMax <- 1e3; iter <- 1
logL <- rep(NA, iterMax)
logL[iter] <- LogLik(pi, mu, y)
logL[iter]
while((diff > tol) & (iter < iterMax)){
iter <- iter+1
# E step
tau <- y0*pi/(pi + (1-pi)*exp(-mu))
tau <- cbind(tau, (1-tau));
# M step
piNew <- mean(tau[, 1])
muNew <- sum(tau[, 2]*y)/sum(tau[, 2])
# Test & update
diff <- max(abs(c(piNew, muNew)-c(pi, mu)))
pi <- piNew;
mu <- muNew
logL[iter] <- LogLik(pi, mu, y)
cat(pi, mu, diff, logL[iter], '\n')
}
plot(logL[1:iter], type='b', pch=20)
cat('ZIP: pi=', pi, ', mu=', mu, ', logL=', logL[iter], '\n')
cat('Poisson: mu=', mean(y), ', logL=', sum(dpois(y, mean(y), log=TRUE)), '\n')
plot(logL[1:iter], type='b', pch=20)
cat('ZIP: pi=', pi, ', mu=', mu, ', logL=', logL[iter], '\n')
cat('Poisson: mu=', mean(y), ', logL=', sum(dpois(y, mean(y), log=TRUE)), '\n')
# ZIP model for abundance data
rm(list=ls());
# Data
abundance <- read.table('BarentsFish.csv', sep=';', header=TRUE)
j <- 10; n <- nrow(abundance)
y <- abundance$Se_ma #[, 4+j]
y0 <- 1*(y==0)
hist(y, breaks=100)
# Functions
LogLik <- function(prob_pi, mu, y){sum(log(prob_pi*(y==0) + (1-prob_pi)*dpois(y, mu)))}
# Init
prob_pi <- mean(y==0)
mu <- mean(y[y>0])
LogLik(prob_pi,mu,y)
# EM for ZIP model
tol <- 1e-6; diff <- 2*tol;
iterMax <- 1e3; iter <- 1
logL <- rep(NA, iterMax)
logL[iter] <- LogLik(pi, mu, y)
while((diff > tol) & (iter < iterMax)){
iter <- iter+1
# E step
tau <- y0*pi/(pi + (1-pi)*exp(-mu))
tau <- cbind(tau, (1-tau));
# M step
piNew <- mean(tau[, 1])
muNew <- sum(tau[, 2]*y)/sum(tau[, 2])
# Test & update
diff <- max(abs(c(piNew, muNew)-c(pi, mu)))
pi <- piNew;
mu <- muNew
logL[iter] <- LogLik(pi, mu, y)
cat(pi, mu, diff, logL[iter], '\n')
}
plot(logL[1:iter], type='b', pch=20)
y <- abundance$Se_me #[, 4+j]
y0 <- 1*(y==0)
hist(y, breaks=100)
rm(list=ls()); par(mfrow=c(2, 2), mex=.6)
# Data
abundance <- read.table('BarentsFish.csv', sep=';', header=TRUE)
j <- 20; n <- nrow(abundance)
x <- as.matrix(cbind(rep(1, n), abundance[, 1:4])); y <- abundance[, 4+j]
y0 <- 1*(y==0)
hist(y, breaks=sqrt(n))
# Functions
LogLikBernoulli <- function(alpha, x, y0, w){sum(w * y0 * x%*%alpha) - sum(log(1+exp(x%*%alpha)))}
# LogLikBernoulli <- function(alpha, x, y0, w){sum(w * dbinom(y0, 1, plogis(x%*%alpha), log=TRUE))}
GradLogLikBernoulli <- function(alpha, x, y0, w){as.vector(t(w - plogis(x%*%alpha)) %*% x)}
LogLikPoisson <- function(beta, x, y, w){sum(w * dpois(y, exp(x%*%beta), log=TRUE))}
GradLogLikPoisson <- function(beta, x, y, w){as.vector(t(w*(y - exp(x%*%beta))) %*% x)}
LogLik <- function(alpha, beta, x, y){
pi <- plogis(x%*%alpha); lambda <- exp(x%*%beta)
return(sum(log(pi*(y==0) + (1-pi)*dpois(y, lambda))))
}
# Init
alphaInit <- as.vector(glm(y0 ~ -1 + x, family='binomial')$coef)
betaInit <- as.vector(glm(y ~ -1 + x, family='poisson')$coef)
# EM for ZIP regression
tol <- 1e-6; diff <- 2*tol;
iterMax <- 1e3; iter <- 1
logL <- rep(NA, iterMax)
alpha <- alphaInit; beta <- betaInit
logL[iter] <- LogLik(alpha, beta, x, y)
while((diff > tol) & (iter < iterMax)){
iter <- iter+1;
# E step
pi <- plogis(x%*%alpha); lambda <- exp(x%*%beta)
tau <- y0*pi/(pi + (1-pi)*exp(-lambda))
tau <- cbind(tau, (1-tau));
# tau <- tau+tolTau; tau <- tau / rowSums(tau)
# M step
# alphaNew <- optim(par=alpha, f=LogLikBernoulli, g=GradLogLikBernoulli, y0=y0, x=x, w=tau[, 1],
#                  control=list(fnscale=-1))$par
# betaNew <- optim(par=beta, f=LogLikPoisson, g=GradLogLikPoisson, y=y, x=x, w=tau[, 2],
#                 control=list(fnscale=-1))$par
alphaNew <- optim(par=alpha, f=LogLikBernoulli, y0=y0, x=x, w=tau[, 1],
control=list(fnscale=-1))$par
betaNew <- optim(par=beta, f=LogLikPoisson, y=y, x=x, w=tau[, 2],
control=list(fnscale=-1))$par
# Test & update
diff <- max(abs(c(alphaNew, betaNew)-c(alpha, beta)))
alpha <- alphaNew; beta <- betaNew
logL[iter] <- LogLik(alpha, beta, x=x, y=y)
cat(alpha, beta, diff, logL[iter], '\n')
}
