}
}
##Matrice_expr_dev2_gamma_i0_carre=Matrice_expr_dev2_gamma_i0_carre+Matrice_P2
Matrice_expr_dev2_gamma_i0_carre=Matrice_expr_dev2_gamma_i0_carre+Matrice_P2
return (Matrice_expr_dev2_gamma_i0_carre)
}
Matrice_ABCDE2<- function(sjk,I,J,K,Theta_X,Theta_W,Gamma){
Matrice_expr_dev2_gamma_autres <- array(rep(0,I*J*K),c(I,J,K))
Matrice_P3 <-P3(I,J,K,Theta_X,Theta_W,Gamma)
for (i in 1:I){
for (j in 1:J){
for (k in 1:K){
Matrice_expr_dev2_gamma_autres [i,j,k]=
-(Theta_W[i])*D.gamma.k(sjk,i,j,k,Theta_X,Theta_W,Gamma)
+(Theta_W[i]**2)*E(sjk,i,j,k,Theta_X,Theta_W,Gamma)
}
}
}
Matrice_expr_dev2_gamma_autres=Matrice_expr_dev2_gamma_autres+Matrice_P3
return (Matrice_expr_dev2_gamma_autres)
}
Matrice_ABCDE3<- function(sjk,I,J,K,Theta_X,Theta_W,Gamma){
Matrice_expr_dev2_gamma_autres <- array(rep(0,I*J*K),c(I,J,K))
Matrice_P4 <-P4(I,J,K,Theta_X,Theta_W,Gamma)
for (i in 1:I){
for (j in 1:J){
for (k in 1:K){
if (k==1)
Gammak=0
else
Gammak=Gamma[k-1]
Matrice_expr_dev2_gamma_autres [i,j,k]=
-(1+Gammak)*D.gamma.k(sjk,i,j,k,Theta_X,Theta_W,Gamma)
+(Theta_W[i]*(1+Gammak))*E(sjk,i,j,k,Theta_X,Theta_W,Gamma)
}
}
}
Matrice_expr_dev2_gamma_autres=Matrice_expr_dev2_gamma_autres+Matrice_P4
return (Matrice_expr_dev2_gamma_autres)
}
#Expression E:
E.old <- function(sjk,i,j,k,Theta_X,Theta_W,Gamma){
if (j==1)
Theta_Xij=0
else
Theta_Xij=Theta_X[i,j]
if (k==1)
Gammak=0
else
Gammak=Gamma[k-1]
a <- sjk[j,k]*exp(-Theta_W[i]*(1+Gammak))/(1+sjk[j,k]*exp(Theta_W[i]*(1+Gammak)+Theta_X[i,1]+Theta_Xij))
return (a)
}
E <- function(sjk,i,j,k,Theta_X,Theta_W,Gamma){
if (j==1)
Theta_Xij=0
else
Theta_Xij=Theta_X[i,j]
if (k==1)
Gammak=0
else
Gammak=Gamma[k-1]
a <- sjk[j,k]*exp(Theta_X[i,1]+Theta_Xij)/(1+sjk[j,k]*exp(Theta_W[i]*(1+Gammak)+Theta_X[i,1]+Theta_Xij))
return (a)
}
#Expression B:
B <- function(l,sjk,i,j,k,Theta_X,Theta_W,Gamma){
if (k==1)
Gammak=0
else
Gammak=Gamma[k-1]
a <- l*exp(-Theta_W[i]*(1+Gammak))/((l+exp(-Theta_W[i]*(1+Gammak)))**2)
return (a)
}
#Expression P2
P2 <- function(sjk,I,J,K,Theta_X,Theta_W,Gamma){
Matrice_expression_proba_gamma_i0_carre=array(rep(0,I*J*K),c(I,J,K))
threshold=0.01
for (i in 1:I){
for (j in 1:J){
for (k in 1:K){
epsilon=1
somme=0
l=0
while (epsilon > threshold){
l <- l+1
pnb <- pnbinom(l,Mu(i,j,k,Theta_X,sjk[j,k]),Size(i,k,Theta_W,Gamma))
epsilon <- pnb*S2(l,i,j,k,Theta_X,Theta_W,Gamma)
somme <- somme+epsilon
}
if (k==1)
Gammak=0
else
Gammak=Gamma[k-1]
Matrice_expression_proba_gamma_i0_carre[i,j,k] <- somme*(1+Gammak)**2
}
}
}
return (Matrice_expression_proba_gamma_i0_carre)
}
#Expression P3!
P3 <- function(I,J,K,Theta_X,Theta_W,Gamma){
Matrice_expression_proba_gamma_autres=array(rep(0,I*J*K),c(I,J,K))
threshold=0.01
for (i in 1:I){
for (j in 1:J){
for (k in 1:K){
epsilon=1
somme=0
l=0
while (epsilon > threshold){
l <- l+1
pnb <- pnbinom(l,Mu(i,j,k,Theta_X,sjk[j,k]),Size(i,k,Theta_W,Gamma))
epsilon <- pnb*S2(l,i,j,k,Theta_X,Theta_W,Gamma)
somme <- somme+epsilon
Matrice_expression_proba_gamma_autres[i,j,k] <- somme*(Theta_W[i]**2)
}
}
}
}
return (Matrice_expression_proba_gamma_autres)
}
P4 <- function(I,J,K,Theta_X,Theta_W,Gamma){
Matrice_expression_proba_gamma_autres=array(rep(0,I*J*K),c(I,J,K))
threshold=0.01
for (i in 1:I){
for (j in 1:J){
for (k in 1:K){
if (k==1)
Gammak=0
else
Gammak=Gamma[k-1]
epsilon=1
somme=0
l=0
while (epsilon > threshold){
l <- l+1
pnb <- pnbinom(l,Mu(i,j,k,Theta_X,sjk[j,k]),Size(i,k,Theta_W,Gamma))
epsilon <- pnb*S2(l,i,j,k,Theta_X,Theta_W,Gamma)
somme <- somme+epsilon
Matrice_expression_proba_gamma_autres[i,j,k] <- somme*Theta_W[i]*(1+Gammak)
}
}
}
}
return (Matrice_expression_proba_gamma_autres)
}
S2 <- function (l,i,j,k,Theta_X,Theta_W,Gamma){
if (k==1)
Gammak=0
else
Gammak=Gamma[k-1]
a <- l*exp(-Theta_W[i]*(1+Gammak))/((l+exp(-Theta_W[i]*(1+Gammak)))**2)
return (a)
}
#########It?ration Newton Raphson
Newton_raphson <- function (sjk,I,J,K,Theta_X,Theta_W,Gamma,Y)
{
Omega.old=c(as.vector(t(Theta_X)),Theta_W,Gamma)
test=list()
for (e in 1:10)
{
hessienne=Hessienne(sjk,I,J,K,Theta_X,Theta_W,Gamma)
jacobienne=Jacobienne.fct(sjk,I,J,K,Theta_X,Theta_W,Gamma,Y)
hessienne_inv=solve(hessienne)
Omega.old=c(as.vector(t(Theta_X)),Theta_W,Gamma)
Omega.new=Omega.old-(hessienne_inv %*% jacobienne)
test[[e]]=cbind(Omega.old,Omega.new,Omega.old-Omega.new)
Theta_X=matrix(Omega.new[1:(I*J)],ncol=J,byrow=FALSE)
Theta_W=Omega.new[((I*J)+1):(I+(I*J))]
Gamma=Omega.new[((I*J)+I+1):(I+(I*J)+K-1)]
}
#invisible(Omega.new)
invisible(test)
}
set.seed(2)
Theta_X1 <- matrix(runif(I*J,min=-0.05,max=0.05),nrow=I,ncol=J) # beta_{ij} j>=1
Theta_X1[,1] <- runif(I,min=-0.1,max=0.1) # beta_{i0}
Theta_W1 <- c(runif(I,min=0.18,max=0.19)) #gamma_{i0} effet gene sur la dispersion
Gamma1 <- c(runif(K-1,min=-0.002,max=0.003)) # gamma_k effet date
test4.7=Newton_raphson(sjk,I,J,K,Theta_X1,Theta_W1,Gamma1,Y)
Newton_raphson <- function (sjk,I,J,K,Theta_X,Theta_W,Gamma,Y)
{
Omega.old=c(as.vector(t(Theta_X)),Theta_W,Gamma)
test=list()
for (e in 1:10)
{
hessienne=Hessienne(sjk,I,J,K,Theta_X,Theta_W,Gamma)
jacobienne=Jacobienne.fct(sjk,I,J,K,Theta_X,Theta_W,Gamma,Y)
hessienne_inv=solve(hessienne)
Omega.old=c(as.vector(t(Theta_X)),Theta_W,Gamma)
Omega.new=Omega.old-(hessienne_inv %*% jacobienne)
test[[e]]=cbind(Omega.old,Omega.new,Omega.old-Omega.new)
Theta_X=matrix(Omega.new[1:(I*J)],ncol=J,byrow=FALSE)
Theta_W=Omega.new[((I*J)+1):(I+(I*J))]
Gamma=Omega.new[((I*J)+I+1):(I+(I*J)+K-1)]
}
#invisible(Omega.new)
invisible(test)
}
#set.seed(2)
Theta_X1 <- matrix(runif(I*J,min=-0.05,max=0.05),nrow=I,ncol=J) # beta_{ij} j>=1
Theta_X1[,1] <- runif(I,min=-0.1,max=0.1) # beta_{i0}
Theta_W1 <- c(runif(I,min=0.18,max=0.19)) #gamma_{i0} effet gene sur la dispersion
Gamma1 <- c(runif(K-1,min=-0.002,max=0.003)) # gamma_k effet date
test4.7=Newton_raphson(sjk,I,J,K,Theta_X1,Theta_W1,Gamma1,Y)
library(blockmodels)
source('function_for_blockmodels.R')
fungi_tree = read.table("FungiTree/fungi_tree_interactions.txt")
fungi_tree = fungi_tree[-dim(fungi_tree)[1],
-dim(fungi_tree)[2]]
dim(fungi_tree)
head(fungi_tree)
tree = t(as.matrix(fungi_tree)) %*% as.matrix(fungi_tree)
diag(tree) <- 0
tree_bin = tree
tree_bin[tree > 1] = 1
head(tree_bin)
tree_genet = read.table("FungiTree/tree_genetic.txt")
tree_genet = as.matrix(tree_genet)
tree_taxo = read.table("FungiTree/tree_taxo.txt")
tree_taxo = as.matrix(tree_taxo)
tree_geo = read.table("FungiTree/tree_geo.txt")
tree_geo = as.matrix(tree_geo)
tree_genet
plotMatrix(Mat = tree_bin,rowFG = 'tree', colFG  = 'tree')
sbm.tree_bin <- BM_bernoulli("SBM",tree_bin)
sbm.tree_bin$estimate()
Q = which.max(sbm.tree_bin$ICL)
Q
paramEstimSBM <- extractParamBM(sbm.tree_bin,Q)
paramEstimSBM$pi
paramEstimSBM$alpha
paramEstimSBM$Z
plotMatrix(tree_bin,'tree','tree', fileNameSave = NULL, clustering = list(row=paramEstimSBM$Z))
plotNetBM(sbm.tree_bin,Q)
boxplot(tree_genet~paramEstimSBM$Z)
boxplot(tree_genet[which(paramEstimSBM$Z==1,])
boxplot(tree_genet[which(paramEstimSBM$Z==1),])
tree_genet[which(paramEstimSBM$Z==1),]
tree_genet[which(paramEstimSBM$Z==1),which(paramEstimSBM$Z==1)]
boxplot(tree_genet[which(paramEstimSBM$Z==1),which(paramEstimSBM$Z==1)])
boxplot(mean(tree_genet[which(paramEstimSBM$Z==1),which(paramEstimSBM$Z==1)])
)
boxplot(tree_genet[which(paramEstimSBM$Z==1),which(paramEstimSBM$Z==1)])
boxplot(sum(tree_genet[which(paramEstimSBM$Z==1),which(paramEstimSBM$Z==1)]))
sum(tree_genet[which(paramEstimSBM$Z==1),which(paramEstimSBM$Z==1)])/length(which(paramEstimSBM$Z==1)))
sum(tree_genet[which(paramEstimSBM$Z==1),which(paramEstimSBM$Z==1)])/length(which(paramEstimSBM$Z==1))
colSums(tree_genet[which(paramEstimSBM$Z==1),which(paramEstimSBM$Z==1)])/length(which(paramEstimSBM$Z==1))
mean(colSums(tree_genet[which(paramEstimSBM$Z==1),which(paramEstimSBM$Z==1)])/length(which(paramEstimSBM$Z==1)))
mean(colSums(tree_genet[which(paramEstimSBM$Z==2),which(paramEstimSBM$Z==2)])/length(which(paramEstimSBM$Z==2)))
mean(colSums(tree_genet[which(paramEstimSBM$Z==5),which(paramEstimSBM$Z==5)])/length(which(paramEstimSBM$Z==5)))
length(which(paramEstimSBM$Z==5))
tree_genet[which(paramEstimSBM$Z==5),which(paramEstimSBM$Z==5)]
mean(tree_genet[which(paramEstimSBM$Z==5),which(paramEstimSBM$Z==5)])
mean(tree_genet[which(paramEstimSBM$Z==5),which(paramEstimSBM$Z==5)],diag=F)
mean(tree_genet[which(paramEstimSBM$Z==5),which(paramEstimSBM$Z==5)],diag=T)
vec(tree_genet[which(paramEstimSBM$Z==5),which(paramEstimSBM$Z==5)],diag=F)
c(tree_genet[which(paramEstimSBM$Z==5),which(paramEstimSBM$Z==5)],diag=F)
c(tree_genet[which(paramEstimSBM$Z==5),which(paramEstimSBM$Z==5)])
x=c(tree_genet[which(paramEstimSBM$Z==5),which(paramEstimSBM$Z==5)])
x=x[-which(x==0)]
x
mean(x)
a=apply(1:Q,function(i) c(tree_genet[which(paramEstimSBM$Z==q),which(paramEstimSBM$Z==q)])
-
a=apply(1:Q,function(i) c(tree_genet[which(paramEstimSBM$Z==q),which(paramEstimSBM$Z==q)]))
a=apply(c(1:Q),function(i) c(tree_genet[which(paramEstimSBM$Z==q),which(paramEstimSBM$Z==q)]))
a=sapply(c(1:Q),function(i) c(tree_genet[which(paramEstimSBM$Z==q),which(paramEstimSBM$Z==q)]))
Q=5
a=sapply(c(1:Q),function(i) c(tree_genet[which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]))
a
image(t(Adj_ord)[n:1,])
a=a[-which(x==0)]
a
a=sapply(c(1:Q),function(i) c(tree_genet[which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]))
a=a[-which(a==0)]
a=sapply(c(1:Q),function(i) a=c(tree_genet[which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]) a=a[-which(a==0)])
Group_Covar=sapply(c(1:Q),function(i) a=c(tree_genet[which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]))
Group_Covar[[1]]
Group_Covar[[1]][1]
Group_Covar[[1]][2]
Group_Covar=sapply(c(1:Q),function(i) Group_Covar=Group_Covar[[i]][-which(a==0)])
Group_Covar=sapply(c(1:Q),function(i) Group_Covar=Group_Covar[[i]][-which(Group_Covar==0)])
i=3
Group_Covar[[i]]
Group_Covar=sapply(c(1:Q),function(i) Group_Covar=Group_Covar[[i]][-which(Group_Covar[[i]][]==0)])
Group_Covar
Group_mean=sapply(c(1:Q),function(i) mean(Group_Covar))
Group_mean=sapply(c(1:Q),function(i) mean(Group_Covar[[i]]))
Group_mean
tree_genet = read.table("FungiTree/tree_genetic.txt")
tree_genet = as.matrix(tree_genet)
tree_taxo = read.table("FungiTree/tree_taxo.txt")
tree_taxo = as.matrix(tree_taxo)
tree_geo = read.table("FungiTree/tree_geo.txt")
tree_geo = as.matrix(tree_geo)
ListVar=list(tree_genet,tree_taxo,tree_geo)
for(j in 1: 3)
{
Group_Covar[j]=sapply(c(1:Q),function(i) a=c(ListVar[j][which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]))
Group_Covar[j]=sapply(c(1:Q),function(i) Group_Covar=Group_Covar[[i]][-which(Group_Covar[[i]][]==0)])
Group_mean[j]=sapply(c(1:Q),function(i) mean(Group_Covar[[i]]))
}
ListVar[j][which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]
ListVar[1]
i=1
ListVar[j][which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]
ListVar[1][2]
ListVar[1][]
ListVar[1][1:2]
ListVar[1][[1:2]
]
for(j in 1: 3)
{
Group_Covar[j]=sapply(c(1:Q),function(i) a=c(ListVar[j][[which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]))
Group_Covar[j]=sapply(c(1:Q),function(i) Group_Covar=Group_Covar[[i]][-which(Group_Covar[[i]][]==0)])
Group_mean[j]=sapply(c(1:Q),function(i) mean(Group_Covar[[i]]))
}
for(j in 1: 3)
{
Group_Covar[j]=sapply(c(1:Q),function(i) a=c(ListVar[j][[which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]])
Group_Covar[j]=sapply(c(1:Q),function(i) Group_Covar=Group_Covar[[i]][-which(Group_Covar[[i]][]==0)])
Group_mean[j]=sapply(c(1:Q),function(i) mean(Group_Covar[[i]]))
}
c(ListVar[j][[which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]]
for(j in 1: 3)
{
Group_Covar[j]=sapply(c(1:Q),function(i) c(ListVar[j][[which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]]))
Group_Covar[j]=sapply(c(1:Q),function(i) Group_Covar=Group_Covar[[i]][-which(Group_Covar[[i]][]==0)])
Group_mean[j]=sapply(c(1:Q),function(i) mean(Group_Covar[[i]]))
}
for(j in 1: 3)
{
Group_Covar[j]=sapply(c(1:Q),function(i) c(ListVar[j][[which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]]))
Group_Covar[j]=sapply(c(1:Q),function(i) Group_Covar=Group_Covar[[i]][-which(Group_Covar[[i]][]==0)])
Group_mean[j]=sapply(c(1:Q),function(i) mean(Group_Covar[j][[i]]))
}
Group_Covar[j]
sapply(c(1:Q),function(i) c(ListVar[j][[which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]]))
)j=1
j=1
i=1
c(ListVar[j][[which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]])
which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)
ListVar[j]
c(ListVar[j][[which(paramEstimSBM$Z==i)]])
ListVar[j][[which(paramEstimSBM$Z==i)]]
which(paramEstimSBM$Z==i)
head(ListVar[j])
ListVar[j][1:2]
ListVar[j][[1:2]]
ListVar[j][[1,3]]
class(ListVar[j])
class(ListVar[j][[]])
ListVar
j=2
ListVar[j]
dim(ListVar[j])
ListVar[j][1,1]
ListVar[j][[]]
ListVar[j][[1]]
ListVar[j][[1]][1,2]
ListVar[j][[1]][1:2,2:5]
ListVar[j][[2]][1:2,2:5]
c(ListVar[j][[1]][which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)])
Group_Covar[j]=sapply(c(1:Q),function(i) c(ListVar[j][[1]][which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]))
Group_Covar[j]=sapply(c(1:Q),function(i) c(ListVar[j][[1]][which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]))
c(ListVar[j][[1]][which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)])
Group_Covar[j]
# creer une liste taille nbr covar
for(j in 1: 3)
{
Group_Covar[j]=sapply(c(1:Q),function(i) c(ListVar[j][[1]][which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]))
Group_Covar[j]=sapply(c(1:Q),function(i) Group_Covar[j]=Group_Covar[j][-which(Group_Covar[j]==0)])
Group_mean[j]=sapply(c(1:Q),function(i) mean(Group_Covar[j]))
}
ListVar
j=2
i=1
c(ListVar[j][[1]][which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)])
# creer une liste taille nbr covar
Group_Covar=list()
Group_Covar[j]=sapply(c(1:Q),function(i) c(ListVar[j][[1]][which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]))
j
sapply(c(1:Q),function(i) c(ListVar[j][[1]][which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]))
Listvar[1]
ListVar[1]
ListVar[2]
Group_Covar[j]=sapply(c(1:Q),function(i) c(ListVar[j][[1]][which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]))
sapply(c(1:Q),function(i) c(ListVar[j][[1]][which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]))
Group_Covar[j][[]]=sapply(c(1:Q),function(i) c(ListVar[j][[1]][which(paramEstimSBM$Z==i),which(paramEstimSBM$Z==i)]))
tree_taxo
x=c(tree_taxo[which(paramEstimSBM$Z==q),which(paramEstimSBM$Z==q))
x=x[-which(x==0)]
mean(x)
q=1
x=c(tree_taxo[which(paramEstimSBM$Z==q)
,which(paramEstimSBM$Z==q)])
x
x=x[-which(x==0)]
mean(x )
floor(mean(x))
lbm <- BM_bernoulli("LBM",as.matrix(fungi_tree))
lbm$estimate()
Q = which.max(lbm$ICL)
Q
lbm$ICL
lbm[[8]]
lbm$model_parameters[[8]]
lbm$model_name
paramEstimLBM <- extractParamBM(lbm,Q)
paramEstimLBM$piRow
paramEstimLBM$piCol
paramEstimLBM$alpha
paramEstimLBM$ZRow
paramEstimLBM$ZCol
sbm.tree_bin <- BM_bernoulli("SBM",tree_bin)
sbm.tree_bin$estimate()
sbm.tree_bin$ICL
tree_list= readt.table("nouvelles data/Tree_species_list")
tree_list= read.table("nouvelles data/Tree_species_list")
tree_list= read.table("nouvelles_data/Tree_species_list")
setwd("~/Dropbox/Formation_NGB (1)")
tree_list= read.table("nouvelles_data/Tree_species_list")
tree_list= read.table("nouvelles_data/Tree_species_list.csv")
tree_list= read.table("nouvelles_data/Tree_species_list.csv", sep=";")
tree_list
fungi_list= read.table("nouvelles_data/Fungal_species_list.csv", sep=";")
fungi_list=fungi_list[,2]
fungi_list
data_list=list(fungi_tree, tree)
data_list
fungi_tree = read.table("FungiTree/fungi_tree_interactions.txt")
fungi_tree = fungi_tree[-dim(fungi_tree)[1],
-dim(fungi_tree)[2]]
tree = t(as.matrix(fungi_tree)) %*% as.matrix(fungi_tree)
diag(tree) <- 0
tree_bin = tree
tree_bin[tree > 1] = 1
tree_genet = read.table("FungiTree/tree_genetic.txt")
tree_genet = as.matrix(tree_genet)
tree_taxo = read.table("FungiTree/tree_taxo.txt")
tree_taxo = as.matrix(tree_taxo)
tree_geo = read.table("FungiTree/tree_geo.txt")
tree_geo = as.matrix(tree_geo)
ListVar=list(tree_genet,tree_taxo,tree_geo)
tree_list= read.table("nouvelles_data/Tree_species_list.csv", sep=";")
tree_list=tree_list[,2]
fungi_list= read.table("nouvelles_data/Fungal_species_list.csv", sep=";")
fungi_list=fungi_list[,2]
data_list=list(fungi_tree, tree, tree_bin, ListVar, tree_list, fungi_list)
# liste avec fungi_tree, tree, tree_bin, ListVar, tree_list, fungi_list
save(data_list,file='fungi_tree.Rdata')
load("data_list.Rdata")
load("fungi_tree.Rdata")
fungi_tree
a=load("fungi_tree.Rdata")
a
a$tree
fungi_tree = read.table("FungiTree/fungi_tree_interactions.txt")
fungi_tree = fungi_tree[-dim(fungi_tree)[1],
-dim(fungi_tree)[2]]
tree = t(as.matrix(fungi_tree)) %*% as.matrix(fungi_tree)
diag(tree) <- 0
tree_bin = tree
tree_bin[tree > 1] = 1
tree_genet = read.table("FungiTree/tree_genetic.txt")
tree_genet = as.matrix(tree_genet)
tree_taxo = read.table("FungiTree/tree_taxo.txt")
tree_taxo = as.matrix(tree_taxo)
tree_geo = read.table("FungiTree/tree_geo.txt")
tree_geo = as.matrix(tree_geo)
ListVar=list(tree_genet,tree_taxo,tree_geo)
tree_list= read.table("nouvelles_data/Tree_species_list.csv", sep=";")
tree_list=tree_list[,2]
fungi_list= read.table("nouvelles_data/Fungal_species_list.csv", sep=";")
fungi_list=fungi_list[,2]
# data_list=list(fungi_tree, tree, tree_bin, ListVar, tree_list, fungi_list)
# liste avec fungi_tree, tree, tree_bin, ListVar, tree_list, fungi_list
save(data_list,file='fungi_tree_data.Rdata')
fungi_tree = read.table("FungiTree/fungi_tree_interactions.txt")
fungi_tree = fungi_tree[-dim(fungi_tree)[1],
-dim(fungi_tree)[2]]
tree = t(as.matrix(fungi_tree)) %*% as.matrix(fungi_tree)
diag(tree) <- 0
tree_bin = tree
tree_bin[tree > 1] = 1
tree_genet = read.table("FungiTree/tree_genetic.txt")
tree_genet = as.matrix(tree_genet)
tree_taxo = read.table("FungiTree/tree_taxo.txt")
tree_taxo = as.matrix(tree_taxo)
tree_geo = read.table("FungiTree/tree_geo.txt")
tree_geo = as.matrix(tree_geo)
ListVar=list(tree_genet,tree_taxo,tree_geo)
tree_list= read.table("nouvelles_data/Tree_species_list.csv", sep=";")
tree_list=tree_list[,2]
fungi_list= read.table("nouvelles_data/Fungal_species_list.csv", sep=";")
fungi_list=fungi_list[,2]
fungi_tree_data= list(Name='data_list', fungi_tree=fungi_tree, tree=tree, tree_bin=tree_bin, ListVar=ListVar, tree_list=tree_list, fungi_list=fungi_list)
# liste avec fungi_tree, tree, tree_bin, ListVar, tree_list, fungi_list
save(fungi_tree_data,file='fungi_tree_data.Rdata')
x=load("fungi_tree_data.Rdata")
x
x$tree_list
x[1]
x[1][[]]
load('fungi_tree_data.Rdata')
dim(tree_fungi)
install.packages("alluvial")
rm(list())
rm(list=ls())
