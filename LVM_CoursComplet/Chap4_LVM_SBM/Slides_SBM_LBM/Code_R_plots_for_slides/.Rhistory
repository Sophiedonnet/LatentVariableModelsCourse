if (length(voisins)<1) return(0)
else return(migr[sample(voisins,1),i])    })
Xnew=Xprec+res
Xnew
source('~/bianca/Recherche/EpidemioGraphe/codes/fct_simulation.R')
sample(1:nb.pop,1)
source('~/bianca/Recherche/EpidemioGraphe/codes/fct_simulation.R')
source('~/bianca/Recherche/EpidemioGraphe/codes/fct_simulation.R')
source('~/bianca/Recherche/EpidemioGraphe/codes/fct_simulation.R')
matrix(Xprec,nrow=nb.pop,ncol=nb.pop)
t(matrix(Xprec==0,nrow=nb.pop,ncol=nb.pop))
matrix(Xprec,nrow=nb.pop,ncol=nb.pop)*t(matrix(Xprec==0,nrow=nb.pop,ncol=nb.pop))
library(planor)
K=10
K=8
m=3
1+K*(m-1)+K*(K-1)/2*(m-1)^2
3^(5)
3^(4)
plankey = planor.designkey(factors=LETTERS[1:10],nlevels = 3,resolution = 5,nunits = 3^5)
plankey = planor.designkey(factors=LETTERS[1:8],nlevels = 3,resolution = 5,nunits = 3^4)
3^8
3^5
plankey = planor.designkey(factors=LETTERS[1:8],nlevels = 3,resolution = 5,nunits = 3^5)
plankey = planor.designkey(factors=LETTERS[1:8],nlevels = 3,resolution = 5,nunits = 3^4)
knitr::opts_chunk$set(echo = TRUE)
norwood=read.table("norwood.csv")
norwood=read.table("norwood.csv",h=T,sep=";")
norwood=read.table("norwood.csv",h=T,sep=",")
head(norwood)
levels(norwood$lower.guild)
levels(norwood$upper.guild)
table(norwood$lower.guild)
table(norwood$upper.guild)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache=TRUE)
hist(proba_arete_ecvar-proba_arete_eccommun)
hist(proba_arete_ecvar-proba_arete_eccommun)
hist(proba_arete_ecvar-proba_arete_eccommun)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache=TRUE)
require(igraph)
require(sna)
require(mclust)
require(fields)
setwd("~/Dropbox/réseaux epidémio/")
source("pgm/fct_calcul_proba_arete.R")
source("pgm/fct_calculs_elementaires.R")
don=read.table("MIRES cotton and rice seed choice.csv",header=TRUE,sep=",",na.strings = c("DNK"))
#une donnee NA
don=don[-which(is.na(don$Standard_name)),]
#info interessantes sur les 3 dernieres annees seulement
don3der=don[don$Year>2011,]
# extraction des matrices d'occupation
don2=don3der
n_ev_min=10
i_seed=which(table(don2$Standard_name)>n_ev_min)
#levels(don2$Standard_name[i_seed])
#matrice standard
minYear=min(don2$Year)
occup_init=matrix(0,nrow=diff(range(don2$Year))+1,ncol=length(unique(don2$Case_No)))
colnames(occup_init)=unique(don2$Case_No)
occup_mats=vector("list",length(i_seed))
for (i in 1:length(i_seed))
{
subdon=don2[don2$Standard_name==levels(don2$Standard_name)[i_seed[i]], ]
temp_occup=occup_init
for (j in 1:nrow(subdon))
{
temp_occup[subdon$Year[j]-minYear+1,as.character(subdon$Case_No[j])]=  temp_occup[subdon$Year[j]-minYear+1,as.character(subdon$Case_No[j])] +1
}
occup_mats[[i]]=temp_occup
}
#bug possible si plusieurs lignes sont presentes plusieurs fois
occup_mats=lapply(occup_mats,function(O){O[O>1]=1;return(O)})
#supprimer des elements dans la liste qui ne sont pas compatibles
res=lapply(occup_mats,rowSums)
resMa=Reduce(rbind,res)
asupprimer=which(rowSums(resMa>0)<=1)
#asupprimer=which(rowSums(resMa>0)<ncol(resMa))
#il faudrait encore verifier qu'il n y a pas de 0 entre 2 etats occupes...
occup_mats[asupprimer]=NULL
#supprimer annees inutiles
res=lapply(occup_mats,rowSums)
occup_mats2=lapply(1:length(res),function(i){
if (sum(res[[i]]==0)>0)
return(occup_mats[[i]][-which(res[[i]]==0),])
else return(occup_mats[[i]])
})
res=lapply(occup_mats2,rowSums)
#on elimine les individus n ayant culitive aucune des varietes (imposer d en garder plus ?)
resbis=lapply(occup_mats2,function(OC){which(colSums(OC)>0)})
agarder=unique(Reduce(c,resbis))
length(agarder)
occup_mats3=lapply(occup_mats2,function(OC){OC[,agarder]})
lapply(occup_mats3,rowSums)
pars=MW_estim_e_c(occup_mats3)
pars
resMW=MW_estim_prob_arete(occup_mats3,pars$epost,pars$cpost)
proba_arete_ec_commun=resMW[2,]
Adj_proba_arete_eccommun=matrix(0,nrow=length(colnames(occup_mats3[[1]])),ncol=length(colnames(occup_mats3[[1]])))
Adj_proba_arete_eccommun[which(upper.tri(Adj_proba_arete_eccommun),arr.ind=TRUE)]=proba_arete_ec_commun
Adj_proba_arete_eccommun=Adj_proba_arete_eccommun+t(Adj_proba_arete_eccommun)
pars=MW_estim_e_c(occup_mats3,fixeW = FALSE)
pars
pars$epost[pars$epost>.9999]=.99
resMW_ecvar=MW_estim_prob_arete_ecvar(occup_mats3,pars$epost,pars$cpost)
proba_arete_ecvar=resMW_ecvar[2,]
Adj_proba_arete_ecvar=matrix(0,nrow=length(colnames(occup_mats3[[1]])),ncol=length(colnames(occup_mats3[[1]])))
Adj_proba_arete_ecvar[which(upper.tri(Adj_proba_arete_ecvar),arr.ind=TRUE)]=proba_arete_ec_commun
Adj_proba_arete_ecvar=Adj_proba_arete_ecvar+t(Adj_proba_arete_ecvar)
#creer matrice cov individus
covar_noeuds=as.data.frame(matrix(0,nrow=ncol(occup_mats3[[1]]),ncol=5))
names(covar_noeuds)=c("caseno","Village","Age","Caste","Total_acreage")
covar_noeuds$Village=factor(NA,levels = levels(don$Village))
covar_noeuds$Caste=factor(NA,levels = levels(don$Caste))
for (i in 1:ncol(occup_mats3[[1]]))
{
caseprov=colnames(occup_mats3[[1]])[i]
echcase=which(don3der$Case_No==caseprov)
covar_noeuds[i,c(1,2,4,5)]=don3der[echcase[1],c(3,2,4,6)]
covar_noeuds[i,3]=don3der$Year[echcase[1]]-don3der$Age[echcase[1]]
}
summary(covar_noeuds)
#discretiser Age et acreage
#hist(covar_noeuds$Age,breaks = 12)
#hist(covar_noeuds$Total_acreage,breaks = 12)
covar_noeuds$AgeD=as.integer(cut(covar_noeuds$Age,breaks = c(1930,1950,1960,1970,1980,2000)))
covar_noeuds$AgeDcol=tim.colors(5)[covar_noeuds$AgeD]
plot(covar_noeuds$Age,covar_noeuds$AgeD,col=covar_noeuds$AgeDcol)
covar_noeuds$Total_acreageD=as.integer(cut(covar_noeuds$Total_acreage,breaks = c(0,5,10,20,40)))
covar_noeuds$Total_acreageDcol=tim.colors(4)[covar_noeuds$Total_acreageD]
plot(covar_noeuds$Total_acreage,covar_noeuds$Total_acreageD,col=covar_noeuds$Total_acreageDcol)
hist(proba_arete_ecvar-proba_arete_eccommun,breaks = 127)
hist(proba_arete_ecvar-proba_arete_ecommun,breaks = 127)
hist(proba_arete_ecvar-proba_arete_ec_commun,breaks = 127)
hist(qlogis(proba_arete_ec_commun),breaks = 127)
hist(qlogis(proba_arete_ecvar),breaks = 127)
a=qlogis(proba_arete_ec_commun)
a=a[a<Inf]
summary(a)
resmclust
plot(resmclust)
resmclust$parameters
table(resmclust$classification)
colSums(resmclust$z)
hist((a),breaks = 127)
plot(ecdf((a)))
colSums(resmclust$z)
a=qlogis(proba_arete_ec_commun)
summary(a)
resmclust=Mclust(a)
a=qlogis(proba_arete_ec_commun)
a=a[a<Inf]
summary(a)
resmclust=Mclust(a)
plogis(0.5)
qlogis(.75)
plogis(.5)
plogis(1)
s2plogis(1)
s2=plogis(1)
s2=plogis(1.1)
s2
s1=plogis(.55)
s1
Adjcom1=(Adj_proba_arete_eccommun>s1)*1
Adjcom1
sum(abs(Adjcom1-Adjvar1)/2
sum(abs(Adjcom1-Adjvar1))/2
sum(abs(Adjcom1-Adjvar1))/2
gplot(Adjcom2,gmode="graph")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache=TRUE)
require(igraph)
require(sna)
require(mclust)
require(fields)
setwd("~/Dropbox/réseaux epidémio/")
source("pgm/fct_calcul_proba_arete.R")
source("pgm/fct_calculs_elementaires.R")
don=read.table("MIRES cotton and rice seed choice.csv",header=TRUE,sep=",",na.strings = c("DNK"))
#une donnee NA
don=don[-which(is.na(don$Standard_name)),]
#info interessantes sur les 3 dernieres annees seulement
don3der=don[don$Year>2011,]
# extraction des matrices d'occupation
don2=don3der
n_ev_min=10
i_seed=which(table(don2$Standard_name)>n_ev_min)
#levels(don2$Standard_name[i_seed])
#matrice standard
minYear=min(don2$Year)
occup_init=matrix(0,nrow=diff(range(don2$Year))+1,ncol=length(unique(don2$Case_No)))
colnames(occup_init)=unique(don2$Case_No)
occup_mats=vector("list",length(i_seed))
for (i in 1:length(i_seed))
{
subdon=don2[don2$Standard_name==levels(don2$Standard_name)[i_seed[i]], ]
temp_occup=occup_init
for (j in 1:nrow(subdon))
{
temp_occup[subdon$Year[j]-minYear+1,as.character(subdon$Case_No[j])]=  temp_occup[subdon$Year[j]-minYear+1,as.character(subdon$Case_No[j])] +1
}
occup_mats[[i]]=temp_occup
}
#bug possible si plusieurs lignes sont presentes plusieurs fois
occup_mats=lapply(occup_mats,function(O){O[O>1]=1;return(O)})
#supprimer des elements dans la liste qui ne sont pas compatibles
res=lapply(occup_mats,rowSums)
resMa=Reduce(rbind,res)
asupprimer=which(rowSums(resMa>0)<=1)
#asupprimer=which(rowSums(resMa>0)<ncol(resMa))
#il faudrait encore verifier qu'il n y a pas de 0 entre 2 etats occupes...
occup_mats[asupprimer]=NULL
#supprimer annees inutiles
res=lapply(occup_mats,rowSums)
occup_mats2=lapply(1:length(res),function(i){
if (sum(res[[i]]==0)>0)
return(occup_mats[[i]][-which(res[[i]]==0),])
else return(occup_mats[[i]])
})
res=lapply(occup_mats2,rowSums)
#on elimine les individus n ayant culitive aucune des varietes (imposer d en garder plus ?)
resbis=lapply(occup_mats2,function(OC){which(colSums(OC)>0)})
agarder=unique(Reduce(c,resbis))
length(agarder)
occup_mats3=lapply(occup_mats2,function(OC){OC[,agarder]})
lapply(occup_mats3,rowSums)
pars=MW_estim_e_c(occup_mats3)
pars
resMW=MW_estim_prob_arete(occup_mats3,pars$epost,pars$cpost)
proba_arete_ec_commun=resMW[2,]
Adj_proba_arete_eccommun=matrix(0,nrow=length(colnames(occup_mats3[[1]])),ncol=length(colnames(occup_mats3[[1]])))
Adj_proba_arete_eccommun[which(upper.tri(Adj_proba_arete_eccommun),arr.ind=TRUE)]=proba_arete_ec_commun
Adj_proba_arete_eccommun=Adj_proba_arete_eccommun+t(Adj_proba_arete_eccommun)
pars=MW_estim_e_c(occup_mats3,fixeW = FALSE)
pars
pars$epost[pars$epost>.9999]=.99
resMW_ecvar=MW_estim_prob_arete_ecvar(occup_mats3,pars$epost,pars$cpost)
proba_arete_ecvar=resMW_ecvar[2,]
Adj_proba_arete_ecvar=matrix(0,nrow=length(colnames(occup_mats3[[1]])),ncol=length(colnames(occup_mats3[[1]])))
Adj_proba_arete_ecvar[which(upper.tri(Adj_proba_arete_ecvar),arr.ind=TRUE)]=proba_arete_ec_commun
Adj_proba_arete_ecvar=Adj_proba_arete_ecvar+t(Adj_proba_arete_ecvar)
#creer matrice cov individus
covar_noeuds=as.data.frame(matrix(0,nrow=ncol(occup_mats3[[1]]),ncol=5))
names(covar_noeuds)=c("caseno","Village","Age","Caste","Total_acreage")
covar_noeuds$Village=factor(NA,levels = levels(don$Village))
covar_noeuds$Caste=factor(NA,levels = levels(don$Caste))
for (i in 1:ncol(occup_mats3[[1]]))
{
caseprov=colnames(occup_mats3[[1]])[i]
echcase=which(don3der$Case_No==caseprov)
covar_noeuds[i,c(1,2,4,5)]=don3der[echcase[1],c(3,2,4,6)]
covar_noeuds[i,3]=don3der$Year[echcase[1]]-don3der$Age[echcase[1]]
}
summary(covar_noeuds)
#discretiser Age et acreage
#hist(covar_noeuds$Age,breaks = 12)
#hist(covar_noeuds$Total_acreage,breaks = 12)
covar_noeuds$AgeD=as.integer(cut(covar_noeuds$Age,breaks = c(1930,1950,1960,1970,1980,2000)))
covar_noeuds$AgeDcol=tim.colors(5)[covar_noeuds$AgeD]
plot(covar_noeuds$Age,covar_noeuds$AgeD,col=covar_noeuds$AgeDcol)
covar_noeuds$Total_acreageD=as.integer(cut(covar_noeuds$Total_acreage,breaks = c(0,5,10,20,40)))
covar_noeuds$Total_acreageDcol=tim.colors(4)[covar_noeuds$Total_acreageD]
plot(covar_noeuds$Total_acreage,covar_noeuds$Total_acreageD,col=covar_noeuds$Total_acreageDcol)
hist(proba_arete_ecvar-proba_arete_ec_commun,breaks = 127)
hist(qlogis(proba_arete_ec_commun),breaks = 127)
hist(qlogis(proba_arete_ecvar),breaks = 127)
a=qlogis(proba_arete_ec_commun)
a=a[a<Inf]
summary(a)
resmclust=Mclust(a)
resmclust
plot(resmclust)
resmclust$parameters
table(resmclust$classification)
#hist((a),breaks = 127)
plot(ecdf((a)))
a=qlogis(proba_arete_ecvar)
a=a[a<Inf]
summary(a)
resmclust=Mclust(a)
resmclust
plot(resmclust)
resmclust$parameters
table(resmclust$classification)
plot(ecdf((a)))
s1=plogis(.55)
s2=plogis(1.1)
Adjcom1=(Adj_proba_arete_eccommun>s1)*1
Adjcom2=(Adj_proba_arete_eccommun>s2)*1
Adjvar1=(Adj_proba_arete_ecvar>s1)*1
Adjvar2=(Adj_proba_arete_ecvar>s2)*1
sum(abs(Adjcom1-Adjvar1))/2
sum(abs(Adjcom2-Adjvar2))/2
gplot(Adjcom1,gmode = "graph")
gplot.layout(Adjcom2,gmode="graph")
gplot.layout.adj(Adjcom2,gmode="graph")
gplot.layout.adj(Adjcom2)
lays1=gplot(Adjcom1,gmode = "graph")
gplot(Adjcom2,mode = "graph",layout.par = lays1)
gplot(Adjcom2,mode = =lays1)
gplot(Adjcom2,mode = lays1)
gplot(Adjcom2,gmode = lays1)
gplot(Adjcom2,gmode = "graph", mode=lays1)
gplot(Adjcom2,gmode = c("graph",lays1))
gplot(Adjcom2,gmode ="graph",coord = lays1)
legend("topright",legend = levels(covar_noeuds$Village),pch=20,col=1:length(levels(covar_noeuds$Village)))
gplot(Adjcom1,gmode = "graph",coord = lays1,vertex.col = covar_noeuds$AgeDcol)
legend("topright",legend = levels(covar_noeuds$AgeDcol),pch=20,col=1:length(levels(covar_noeuds$AgeDcol)))
decoupAge=cut(covar_noeuds$Age,breaks = c(1930,1950,1960,1970,1980,2000))
levels(decoupAge)
decoupTotA=cut(covar_noeuds$Total_acreage,breaks = c(0,5,10,20,40))
covar_noeuds$Total_acreageD=as.integer(decoupTotA)
palette()
cc=colors(20)
cc
colors()
dd=colors()[sample(2:502,length(levels(covar_noeuds$Caste),replace=FALSE)]
sample(2:502,length(levels(covar_noeuds$Caste),replace=FALSE)
sample(2:502,length(levels(covar_noeuds$Caste)),replace=FALSE)
sample(2:502,length(levels(covar_noeuds$Caste)),replace=FALSE)
dd=colors()[sample(2:502,length(levels(covar_noeuds$Caste)),replace=FALSE)]
dd
palette(dd)
gplot(Adjcom1,gmode = "graph",coord = lays1,vertex.col = covar_noeuds$Caste)
levels(covar_noeuds$Caste)
tim.colors(24)
dd=tim.colors(24)
palette(dd)
gplot(Adjcom1,gmode = "graph",coord = lays1,vertex.col = covar_noeuds$Caste)
legend("topright",legend = levels(covar_noeuds$Caste),pch=20,col=1:length(levels(covar_noeuds$Caste)))
colors()
dd=c("black",tim.colors(23))
palette(dd)
gplot(Adjcom1,gmode = "graph",coord = lays1,vertex.col = covar_noeuds$Caste)
legend("topright",legend = levels(covar_noeuds$Caste),pch=20,col=1:length(levels(covar_noeuds$Caste)))
gplot(Adjcom2,gmode = "graph",coord = lays1,vertex.col = covar_noeuds$Caste)
Kvecmax=NULL
length(Kvecmax)
load("~/Dropbox/Multiplex/Ecologie/multilevel_LBM/res_simu/res_simu_dattilo2.Rdata")
mat_modsel
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache=TRUE)
deg_out=rowSums(Adj_proba_arete_eccommun_oriente)
cor(cbind(deg_in,deg_out,covar_noeuds[,c(3,5)]))
demo()
demo(glm.vr)
demo(colors)
26+91+(1.75+3.7)*35
15+27.18+16.6+34
266,64 +92,78 79.3
266.64 +92.78 79.3
266.64 +92.78 +79.3
plot(x, y, col = colr[x], pch = 20)
x=1:10
y=3*x+5
plot(x, y, col = colr[x], pch = 20)
y <- rep(1, 10)
x <- 1:10
colr <- heat.colors(10)
plot(x, y, col = colr[x], pch = 20)
plot(x, y, col = colr[x], pch = 20)
legend("topleft", legend = 1:10, pch = 20, col = colr)
colr
leg.col(col = colr, niv = y)
image.plot(zlim=c(0,10),legend.only=TRUE,col=heat.colors(10))
library(fields)
install.packages("fields")
library(fields)
image.plot(zlim=c(0,10),legend.only=TRUE,col=heat.colors(10))
.
setwd("~/Dropbox/Multiplex/Ecologie/Exposes/2017-06-Inecol-Xalapa/Code_R_plots/")
don=read.table("chilean_TI.txt",header = TRUE,sep="\t",row.names = 2)
library(igraph)
A=as.matrix(don)
betw=betweenness(A)
betw=betweenness(graph_from_adjacency_matrix(A,mode="directed"))
setwd("~/Dropbox/Multiplex/Ecologie/Exposes/2017-06-Inecol-Xalapa/Code_R_plots/")
don=read.table("chilean_TI.txt",header = TRUE,sep="\t",row.names = 2)
library(igraph)
A=as.matrix(don)
A[1:5,1:5]
out=nestedtemp(A)
betw=betweenness(A)
don=read.table("chilean_TI.txt",header = TRUE,sep="\t",row.names = 2)
don=don[,-1]
head(don)
A=as.matrix(don)
don=read.table("chilean_TI.txt",header = TRUE,sep="\t",row.names = 2)
don=don[,-1]
head(don)
A=as.matrix(don)
betw=betweenness(A)
betw=betweenness(graph_from_adjacency_matrix(A,mode="directed"))
betw
colors=rainbow(100)
bols=numeric(nrow(A))
for (i in 1:nrow(A))
bols[i]=colors[ceiling(betw[i])+1]
plot(graph_from_adjacency_matrix(A,mode="directed"),vertex.size=10,vertex.label=NA,vertex.color=bols)
max(betw)
colors=rainbow(62)
bols=numeric(nrow(A))
for (i in 1:nrow(A))
bols[i]=colors[ceiling(betw[i])+1]
plot(graph_from_adjacency_matrix(A,mode="directed"),vertex.size=10,vertex.label=NA,vertex.color=bols)
plot(graph_from_adjacency_matrix(A,mode="directed"),vertex.size=10,vertex.label=NA,vertex.color=bols)
image.plot(zlim=c(min(betw),max(betw)),legend.only=TRUE,col=colors)
colors=rainbow(64)
bols=numeric(nrow(A))
for (i in 1:nrow(A))
bols[i]=colors[ceiling(betw[i])+1]
plot(graph_from_adjacency_matrix(A,mode="directed"),vertex.size=10,vertex.label=NA,vertex.color=bols)
image.plot(zlim=c(min(betw),max(betw)),legend.only=TRUE,col=colors)
colors=rainbow(100)
bols=numeric(nrow(A))
for (i in 1:nrow(A))
bols[i]=colors[ceiling(betw[i])+1]
plot(graph_from_adjacency_matrix(A,mode="directed"),vertex.size=10,vertex.label=NA,vertex.color=bols)
image.plot(zlim=c(min(betw),max(betw)),legend.only=TRUE,col=colors)
colors=rainbow(80)
bols=numeric(nrow(A))
for (i in 1:nrow(A))
bols[i]=colors[ceiling(betw[i])+1]
plot(graph_from_adjacency_matrix(A,mode="directed"),vertex.size=10,vertex.label=NA,vertex.color=bols)
image.plot(zlim=c(min(betw),max(betw)),legend.only=TRUE,col=colors)
image.plot(zlim=c(0,80),legend.only=TRUE,col=colors)
plot(graph_from_adjacency_matrix(A,mode="directed"),vertex.size=10,vertex.label=NA,vertex.color=bols)
image.plot(zlim=c(0,80),legend.only=TRUE,col=colors)
colors=rainbow(64)
bols=numeric(nrow(A))
for (i in 1:nrow(A))
bols[i]=colors[ceiling(betw[i])+1]
plot(graph_from_adjacency_matrix(A,mode="directed"),vertex.size=10,vertex.label=NA,vertex.color=bols)
image.plot(zlim=c(0,80),legend.only=TRUE,col=colors)
library(xtable)
xtable(as.table(summary(betw)))
colors=rainbow(100)
bols=numeric(nrow(A))
for (i in 1:nrow(A))
bols[i]=colors[ceiling(betw[i])+1]
plot(graph_from_adjacency_matrix(A,mode="directed"),vertex.size=10,vertex.label=NA,vertex.color=bols)
image.plot(zlim=c(0,80),legend.only=TRUE,col=colors)
library(xtable)
xtable(as.table(summary(betw)))
colors=rainbow(80)
bols=numeric(nrow(A))
for (i in 1:nrow(A))
bols[i]=colors[ceiling(betw[i])+1]
plot(graph_from_adjacency_matrix(A,mode="directed"),vertex.size=10,vertex.label=NA,vertex.color=bols)
image.plot(zlim=c(0,80),legend.only=TRUE,col=colors)
library(xtable)
pdf("chilean_between.pdf")
dev.off()
pdf("chilean_between.pdf")
plot(graph_from_adjacency_matrix(A,mode="directed"),vertex.size=10,vertex.label=NA,vertex.color=bols)
image.plot(zlim=c(0,80),legend.only=TRUE,col=colors)
dev.off()
par(xpd=TRUE)
plot(graph_from_adjacency_matrix(A,mode="directed"),vertex.size=10,vertex.label=NA,vertex.color=bols)
par(xpd=TRUE)
image.plot(zlim=c(0,80),legend.only=TRUE,col=colors)
pdf("chilean_between.pdf")
plot(graph_from_adjacency_matrix(A,mode="directed"),vertex.size=10,vertex.label=NA,vertex.color=bols)
par(xpd=TRUE)
image.plot(zlim=c(0,80),legend.only=TRUE,col=colors)
dev.off()
par(xpd=TRUE,mar=c(0,0,0,4))
plot(graph_from_adjacency_matrix(A,mode="directed"),vertex.size=10,vertex.label=NA,vertex.color=bols)
image.plot(zlim=c(0,80),legend.only=TRUE,col=colors)
pdf("chilean_between.pdf")
par(xpd=TRUE,mar=c(0,0,0,4))
plot(graph_from_adjacency_matrix(A,mode="directed"),vertex.size=10,vertex.label=NA,vertex.color=bols)
image.plot(zlim=c(0,80),legend.only=TRUE,col=colors)
dev.off()
plot(graph_from_adjacency_matrix(A,mode="directed"),vertex.size=7,vertex.label=NA,vertex.color=bols)
pdf("chilean_between.pdf")
par(xpd=TRUE,mar=c(0,0,0,4))
plot(graph_from_adjacency_matrix(A,mode="directed"),vertex.size=7,vertex.label=NA,vertex.color=bols)
image.plot(zlim=c(0,80),legend.only=TRUE,col=colors)
dev.off()
library(vegan)
install.packages("vegan")
library(vegan)
install.packages("sand")
library(sand)
data("karate")
karate
get.adjacency(karate)
as.matrix(get.adjacency(karate))
plot(karate)
as.matrix(get.adjacency(karate))
A=as.matrix(get.adjacency(karate))
str(karate)
V(karate)
str(V(karate))
E(karate)
E(karate)$weight
str(E(karate))
names(E(karate))
E(karate)$color
E(karate)$weight
E(karate)$names
V(karate)$attributes
V(karate)$names
V(karate)$vnames
atributes(V(karate))
attributes(V(karate))
V(karate)$names
karate$names
